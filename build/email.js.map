{"version":3,"sources":["../src/email.js"],"names":["process","env","NODE_ENV","from","streamTransport","config","templates","Map","baseDir","resolve","__dirname","transporter","createTransport","registerHelper","key","options","data","root","t","hash","loadTemplate","filename","m","module","constructor","_compile","readFileSync","template","exports","readdirSync","forEach","name","statSync","isDirectory","set","subject","html","render","context","get","Error","send","message","sendMail"],"mappings":";;;;;;;;AAWA;;;;AACA;;;;AACA;;;;AACA;;;;;;6NAdA;;;;;;;;;AAgBA;AACA;AACA,aAA4BA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAClEC,QAAM,sBAD4D;AAElEC,mBAAiB;AAFiD,CAAxC,GAGxB;AACFD,QAAM,sBADJ;AAEFC,mBAAiB;AAFf,CAHJ;AAAA,MAAM,EAAED,IAAF,EAAN;AAAA,MAAiBE,MAAjB;;AAQA,MAAMC,YAAY,IAAIC,GAAJ,EAAlB;AACA,MAAMC,UAAU,eAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,CAAhB;AACA,MAAMC,cAAc,qBAAWC,eAAX,CAA2BP,MAA3B,EAAmC,EAAEF,IAAF,EAAnC,CAApB;;AAEA;AACA,qBAAWU,cAAX,CAA0B,GAA1B,EAA+B,CAACC,GAAD,EAAMC,OAAN,KAAkBA,QAAQC,IAAR,CAAaC,IAAb,CAAkBC,CAAlB,CAAoBJ,GAApB,EAAyBC,QAAQI,IAAjC,CAAjD;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,QAAMC,IAAI,IAAIC,OAAOC,WAAX,EAAV;AACA;AACAF,IAAEG,QAAF,CAAW,aAAGC,YAAH,CAAgBL,QAAhB,EAA0B,MAA1B,CAAX,EAA8CA,QAA9C;AACA,SAAO,qBAAWM,QAAX,CAAoBL,EAAEM,OAAtB,CAAP;AACD;;AAED,aAAGC,WAAH,CAAerB,OAAf,EAAwBsB,OAAxB,CAAiCC,IAAD,IAAU;AACxC,MAAI,aAAGC,QAAH,CAAa,GAAExB,OAAQ,IAAGuB,IAAK,EAA/B,EAAkCE,WAAlC,EAAJ,EAAqD;AACnD3B,cAAU4B,GAAV,CAAcH,IAAd,EAAoB;AAClBI,eAASf,aAAc,GAAEZ,OAAQ,IAAGuB,IAAK,aAAhC,CADS;AAElBK,YAAMhB,aAAc,GAAEZ,OAAQ,IAAGuB,IAAK,UAAhC;AAFY,KAApB;AAID;AACF,CAPD;;AASA;;;;;;;;;;kBAUe;AACb;;;;;AAKAM,SAAON,IAAP,EAAqBO,UAAe,EAApC,EAAwC;AACtC,UAAMX,WAAWrB,UAAUiC,GAAV,CAAcR,IAAd,CAAjB;;AAEA,QAAI,CAACJ,QAAL,EAAe;AACb,YAAM,IAAIa,KAAJ,CAAW,uBAAsBT,IAAK,eAAtC,CAAN;AACD;;AAED,WAAO;AACLI,eAASR,SAASQ,OAAT,CAAiBG,OAAjB,CADJ;AAELF,YAAMT,SAASS,IAAT,CAAcE,OAAd;AAFD,KAAP;AAID,GAjBY;AAkBb;;;AAGAG,OAAKC,OAAL,EAAmB3B,OAAnB,EAAiC;AAC/B,WAAOJ,YAAYgC,QAAZ,cACFD,OADE,EAEF3B,OAFE,EAAP;AAID;AA1BY,C","file":"email.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport fs from 'fs';\nimport path from 'path';\nimport nodemailer from 'nodemailer';\nimport handlebars from 'handlebars';\n\n// TODO: Configure email transport for the production environment\n// https://nodemailer.com/smtp/\nconst { from, ...config } = process.env.NODE_ENV === 'production' ? {\n  from: 'no-reply@example.com',\n  streamTransport: true,\n} : {\n  from: 'no-reply@example.com',\n  streamTransport: true,\n};\n\nconst templates = new Map();\nconst baseDir = path.resolve(__dirname, 'emails');\nconst transporter = nodemailer.createTransport(config, { from });\n\n// Register i18n translation helper, for example: {{t \"Welcome, {{user}}\" user=\"John\"}}\nhandlebars.registerHelper('t', (key, options) => options.data.root.t(key, options.hash));\n\nfunction loadTemplate(filename) {\n  const m = new module.constructor();\n  // eslint-disable-next-line no-underscore-dangle\n  m._compile(fs.readFileSync(filename, 'utf8'), filename);\n  return handlebars.template(m.exports);\n}\n\nfs.readdirSync(baseDir).forEach((name) => {\n  if (fs.statSync(`${baseDir}/${name}`).isDirectory()) {\n    templates.set(name, {\n      subject: loadTemplate(`${baseDir}/${name}/subject.js`),\n      html: loadTemplate(`${baseDir}/${name}/html.js`),\n    });\n  }\n});\n\n/**\n * Usage example:\n *\n *   const message = await email.render('welcome', { name: 'John' });\n *   await email.send({\n *     to: '...',\n *     from: '...',\n *     ...message,\n *   });\n */\nexport default {\n  /**\n   * Renders email message from a template and context variables.\n   * @param {string} name The name of a template to render. See `src/emails`.\n   * @param {object} context Context variables.\n   */\n  render(name: string, context: any = {}) {\n    const template = templates.get(name);\n\n    if (!template) {\n      throw new Error(`The email template '${name}' is missing.`);\n    }\n\n    return {\n      subject: template.subject(context),\n      html: template.html(context),\n    };\n  },\n  /**\n   * Sends email message via Nodemailer.\n   */\n  send(message: any, options: any) {\n    return transporter.sendMail({\n      ...message,\n      ...options,\n    });\n  },\n};\n"]}