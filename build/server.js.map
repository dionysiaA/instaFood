{"version":3,"sources":["../src/server.js"],"names":["db","app","redis","server","reload","Promise","resolve","port","process","env","PORT","host","HOSTNAME","launch","callback","require","default","listen","console","log","shutDown","then","close","all","destroy","quit","handleError","err","error","stack","once","exit","channel","on","message","Object","keys","cache","forEach","key","indexOf","catch","emit"],"mappings":";;AAAA;;;;;;;;;AAUA;;AAEA,IAAIA,EAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,SAASC,QAAQC,OAAR,EAAb;;AAEA,MAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,MAAMC,OAAOH,QAAQC,GAAR,CAAYG,QAAZ,IAAwB,SAArC;;AAEA;AACA,MAAMC,SAAUC,QAAD,IAAc;AAC3Bd,OAAKe,QAAQ,MAAR,EAAgBC,OAArB;AACAf,QAAMc,QAAQ,OAAR,EAAiBC,OAAvB;AACAd,UAAQa,QAAQ,SAAR,EAAmBC,OAA3B;AACAb,WAASF,IAAIgB,MAAJ,CAAWV,IAAX,EAAiBI,IAAjB,EAAuB,MAAM;AACpCO,YAAQC,GAAR,CAAa,6CAA4CR,IAAK,IAAGJ,IAAK,GAAtE;AACA,QAAIO,QAAJ,EAAcA;AACf,GAHQ,CAAT;AAID,CARD;;AAUA;AACA,MAAMM,WAAW,MAAMf,QAAQC,OAAR,GACpBe,IADoB,CACf,MAAMlB,UAAU,IAAIE,OAAJ,CAAYC,WAAWH,OAAOmB,KAAP,CAAahB,OAAb,CAAvB,CADD,EAEpBe,IAFoB,CAEf,MAAMhB,QAAQkB,GAAR,CAAY,CACtB,MAAMvB,MAAMA,GAAGwB,OAAH,EADU,EAEtB,MAAMtB,SAAS,IAAIG,OAAJ,CAAYC,WAAWJ,MAAMuB,IAAN,CAAWnB,OAAX,CAAvB,CAFO,CAAZ,CAFS,CAAvB;;AAOA,MAAMoB,cAAcC,OAAOT,QAAQU,KAAR,CAAcD,IAAIE,KAAlB,CAA3B;;AAEA;AACArB,QAAQsB,IAAR,CAAa,SAAb,EAAwB,MAAMV,WAAWC,IAAX,CAAgB,MAAMb,QAAQuB,IAAR,EAAtB,CAA9B;;AAEA;AACA,IAAIvB,QAAQwB,OAAZ,EAAqB;AACnB;AACAxB,UAAQyB,EAAR,CAAW,mBAAX,EAAgCP,WAAhC;AACA;AACAlB,UAAQyB,EAAR,CAAW,SAAX,EAAuBC,OAAD,IAAa;AACjC,QAAIA,YAAY,QAAhB,EAA0B;AACxB9B,eAASA,OAAOiB,IAAP,CAAY,MAAMD,UAAlB,EAA8BC,IAA9B,CAAmC,MAAM;AAChDc,eAAOC,IAAP,CAAYrB,QAAQsB,KAApB,EAA2BC,OAA3B,CAAoCC,GAAD,IAAS;AAC1C,cAAIA,IAAIC,OAAJ,CAAY,cAAZ,MAAgC,CAAC,CAArC,EAAwC,OAAOzB,QAAQsB,KAAR,CAAcE,GAAd,CAAP;AACzC,SAFD;AAGA,eAAO,IAAIlC,OAAJ,CAAYC,WAAWO,OAAOP,OAAP,CAAvB,EAAwCmC,KAAxC,CAA8Cf,WAA9C,CAAP;AACD,OALQ,CAAT;AAMD;AACF,GATD;AAUAlB,UAAQyB,EAAR,CAAW,YAAX,EAAyB,MAAMzB,QAAQkC,IAAR,CAAa,SAAb,CAA/B;AACD;;AAED7B","file":"server.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n/* eslint-disable global-require, no-console */\n\nlet db;\nlet app;\nlet redis;\nlet server;\nlet reload = Promise.resolve();\n\nconst port = process.env.PORT || 8080;\nconst host = process.env.HOSTNAME || '0.0.0.0';\n\n// Launch Node.js server\nconst launch = (callback) => {\n  db = require('./db').default;\n  app = require('./app').default;\n  redis = require('./redis').default;\n  server = app.listen(port, host, () => {\n    console.log(`Node.js API server is listening on http://${host}:${port}/`);\n    if (callback) callback();\n  });\n};\n\n// Shutdown Node.js server and database clients\nconst shutDown = () => Promise.resolve()\n  .then(() => server && new Promise(resolve => server.close(resolve)))\n  .then(() => Promise.all([\n    () => db && db.destroy(),\n    () => redis && new Promise(resolve => redis.quit(resolve)),\n  ]));\n\nconst handleError = err => console.error(err.stack);\n\n// Graceful shutdown\nprocess.once('SIGTERM', () => shutDown().then(() => process.exit()));\n\n// In development mode the app is launched with an IPC channel\nif (process.channel) {\n  // Prevent exiting the process in development mode\n  process.on('uncaughtException', handleError);\n  // Restart the server on code changes (see tools/run.js)\n  process.on('message', (message) => {\n    if (message === 'reload') {\n      reload = reload.then(() => shutDown()).then(() => {\n        Object.keys(require.cache).forEach((key) => {\n          if (key.indexOf('node_modules') === -1) delete require.cache[key];\n        });\n        return new Promise(resolve => launch(resolve)).catch(handleError);\n      });\n    }\n  });\n  process.on('disconnect', () => process.emit('SIGTERM'));\n}\n\nlaunch();\n"]}