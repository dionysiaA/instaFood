{"version":3,"sources":["../src/passport.js"],"names":["serializeUser","user","done","id","deserializeUser","findOne","then","strategies","name","provider","Strategy","require","options","clientID","process","env","FACEBOOK_ID","clientSecret","FACEBOOK_SECRET","profileFields","readProfile","profile","email","_json","OAuth2Strategy","GOOGLE_ID","GOOGLE_SECRET","emails","value","consumerKey","TWITTER_KEY","consumerSecret","TWITTER_SECRET","username","INSTAGRAM_ID","INSTAGRAM_SECRET","console","log","forEach","use","callbackURL","passReqToCallback","req","accessToken","refreshToken","claims","type","findOneByLogin","app","locals","error","setClaims","info","any","create","err"],"mappings":"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","file":"passport.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n/* eslint-disable global-require, no-param-reassign, no-underscore-dangle */\n\nimport passport from 'passport';\nimport User from './models/User';\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findOne({ id }).then(user => done(null, user || null), done);\n});\n\nconst strategies = [\n  {\n    name: 'Facebook',\n    provider: 'facebook',\n    Strategy: require('passport-facebook').Strategy,\n    options: {\n      clientID: process.env.FACEBOOK_ID,\n      clientSecret: process.env.FACEBOOK_SECRET,\n      profileFields: ['name', 'email', 'link', 'locale', 'timezone'],\n    },\n    readProfile(profile) {\n      return {\n        email: profile._json.email,\n      };\n    },\n  },\n  {\n    name: 'Google',\n    provider: 'google',\n    Strategy: require('passport-google-oauth').OAuth2Strategy,\n    options: {\n      clientID: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    },\n    readProfile(profile) {\n      return {\n        email: profile.emails[0].value,\n      };\n    },\n  },\n  {\n    name: 'Twitter',\n    provider: 'twitter',\n    Strategy: require('passport-twitter').Strategy,\n    options: {\n      consumerKey: process.env.TWITTER_KEY,\n      consumerSecret: process.env.TWITTER_SECRET,\n    },\n    readProfile(profile) {\n      return {\n        email: `${profile.username}@twitter.com`,\n      };\n    },\n  },\n  {\n    name: 'Instagram',\n    provider: 'instagram',\n    Strategy: require('passport-instagram').Strategy,\n    options: {\n      clientID: process.env.INSTAGRAM_ID,\n      clientSecret: process.env.INSTAGRAM_SECRET,\n      profileFields: ['name', 'email', 'link', 'locale', 'timezone'],\n    },\n    readProfile(profile) {\n      console.log(profile, 'this is the profile');\n      return {\n        email: `${profile.username}@test.com`,\n        id: profile._json.id,\n      };\n    },\n  },\n];\n\nstrategies.forEach(({ name, provider, Strategy, options, readProfile }) => {\n  passport.use(new Strategy({\n    ...options,\n    callbackURL: `/login/${provider}/return`,\n    passReqToCallback: true,\n  }, async (req, accessToken, refreshToken, profile, done) => {\n    try {\n      // if (req.query.code) {\n      //   console.log(req.query.code, 'here i have an access toker for the user')\n      //   accessToken = req.query.code;\n      // }\n      const { email, id } = readProfile(profile);\n      console.log( id, 'hey you user , where are you!!');\n      console.log(accessToken, 'hey do i have an access token?')\n      const claims = [\n        { type: `urn:${provider}:access_token`, value: accessToken },\n        { type: `urn:${provider}:refresh_token`, value: refreshToken },\n      ];\n\n      let user = await User.findOneByLogin(provider, profile.id);\n      console.log(user, 'hey you user , where are you!!');\n      if (req.user) {\n        if (user && req.user.id === user.id) {\n          done(null, user);\n        } else if (user) {\n          req.app.locals.error = `There is already a ${name} account that belongs to you. Sign in with that account or delete it, then link it with your current account.`;\n          done();\n        } else {\n          await User.setClaims(req.user.id, provider, profile.id, claims);\n          req.app.locals.info = `${name} account has been linked.`;\n          done(null, await User.findOne('id', req.user.id));\n        }\n      } else if (user) {\n        done(null, user);\n      } else if (await User.any({ email })) {\n        req.app.locals.error = `There is already an account using this email address. Sign in to that account and link it with ${name} manually from Account Settings.`;\n        done();\n      } else {\n        user = await User.create({ email });\n        await User.setClaims(user.id, provider, profile.id, claims);\n        done(null, user);\n      }\n    } catch (err) {\n      done(err);\n    }\n  }));\n});\n\nexport default passport;\n"]}