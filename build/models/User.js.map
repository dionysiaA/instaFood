{"version":3,"sources":["../src/models/User.js"],"names":["User","findOne","args","table","where","first","findOneAccessToken","userId","leftJoin","findOneByLogin","provider","key","any","raw","select","then","x","rows","exists","create","user","insert","setClaims","providerKey","claims","transaction","trx","Promise","all","user_id","name","map","claim","type","update","value"],"mappings":";;;;;;AAWA;;;;;;AAEA,MAAMA,IAAN,CAAW;;AAET,SAAOC,OAAP,CAAe,GAAGC,IAAlB,EAAwB;AACtB,WAAO,aAAGC,KAAH,CAAS,OAAT,EAAkBC,KAAlB,CAAwB,GAAGF,IAA3B,EAAiCG,KAAjC,CAAuC,IAAvC,EAA6C,OAA7C,CAAP;AACD;;AAED,SAAOC,kBAAP,CAA0BC,MAA1B,EAAkC;AAChC,WAAO,aAAGJ,KAAH,CAAS,OAAT,EACJK,QADI,CACK,aADL,EACoB,UADpB,EACgC,qBADhC,EAEJJ,KAFI,CAEE,EAAE,uBAAuBG,MAAzB,EAFF,EAGJF,KAHI,CAGG,OAHH,EAGY,MAHZ,EAGoB,OAHpB,CAAP;AAID;;AAED,SAAOI,cAAP,CAAsBC,QAAtB,EAAwCC,GAAxC,EAAqD;AACnD,WAAO,aAAGR,KAAH,CAAS,OAAT,EACJK,QADI,CACK,aADL,EACoB,UADpB,EACgC,qBADhC,EAEJJ,KAFI,CAEE,EAAE,oBAAoBM,QAAtB,EAAgC,mBAAmBC,GAAnD,EAFF,EAGJN,KAHI,CAGE,IAHF,EAGQ,OAHR,CAAP;AAID;;AAED,SAAOO,GAAP,CAAW,GAAGV,IAAd,EAAoB;AAClB,WAAO,aAAGW,GAAH,CAAO,iBAAP,EAA0B,aAAGV,KAAH,CAAS,OAAT,EAAkBC,KAAlB,CAAwB,GAAGF,IAA3B,EAAiCY,MAAjC,CAAwC,aAAGD,GAAH,CAAO,GAAP,CAAxC,CAA1B,EACJE,IADI,CACCC,KAAKA,EAAEC,IAAF,CAAO,CAAP,EAAUC,MADhB,CAAP;AAED;;AAED,SAAOC,MAAP,CAAcC,IAAd,EAAoB;AAClB,WAAO,aAAGjB,KAAH,CAAS,OAAT,EACJkB,MADI,CACGD,IADH,EACS,CAAC,IAAD,EAAO,OAAP,CADT,EAC0BL,IAD1B,CAC+BC,KAAKA,EAAE,CAAF,CADpC,CAAP;AAED;;AAED,SAAOM,SAAP,CAAiBf,MAAjB,EAAyBG,QAAzB,EAAmCa,WAAnC,EAAgDC,MAAhD,EAAwD;AACtD,WAAO,aAAGC,WAAH,CAAeC,OAAOC,QAAQC,GAAR,CAAY,CACvCF,IAAIvB,KAAJ,CAAU,aAAV,EAAyBkB,MAAzB,CAAgC;AAC9BQ,eAAStB,MADqB;AAE9BuB,YAAMpB,QAFwB;AAG9BC,WAAKY;AAHyB,KAAhC,CADuC,EAMvC,GAAGC,OAAOO,GAAP,CAAWC,SAASN,IAAIb,GAAJ,CAAQ,iBAAR,EAA2Ba,IAAIvB,KAAJ,CAAU,aAAV,EAC/CC,KAD+C,CACzC,EAAEyB,SAAStB,MAAX,EAAmB0B,MAAMD,MAAMC,IAA/B,EADyC,CAA3B,EAEpBlB,IAFoB,CAEfC,KAAKA,EAAEC,IAAF,CAAO,CAAP,EAAUC,MAAV,GAAmB;AAC5BQ,QAAIvB,KAAJ,CAAU,aAAV,EACGC,KADH,CACS,EAAEyB,SAAStB,MAAX,EAAmB0B,MAAMD,MAAMC,IAA/B,EADT,EAEGC,MAFH,CAEU,EAAEC,OAAOH,MAAMG,KAAf,EAFV,CADS,GAITT,IAAIvB,KAAJ,CAAU,aAAV,EACGkB,MADH,CACU,EAAEQ,SAAStB,MAAX,EAAmB0B,MAAMD,MAAMC,IAA/B,EAAqCE,OAAOH,MAAMG,KAAlD,EADV,CANmB,CAApB,CANoC,CAAZ,CAAtB,CAAP;AAeD;AA9CQ,C,CAbX;;;;;;;;;kBA8DenC,I","file":"User.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport db from '../db';\n\nclass User {\n\n  static findOne(...args) {\n    return db.table('users').where(...args).first('id', 'email');\n  }\n\n  static findOneAccessToken(userId) {\n    return db.table('users')\n      .leftJoin('user_claims', 'users.id', 'user_claims.user_id')\n      .where({ 'user_claims.user_id': userId})\n      .first( 'email', 'type', 'value');\n  }\n\n  static findOneByLogin(provider: string, key: string) {\n    return db.table('users')\n      .leftJoin('user_logins', 'users.id', 'user_logins.user_id')\n      .where({ 'user_logins.name': provider, 'user_logins.key': key })\n      .first('id', 'email');\n  }\n\n  static any(...args) {\n    return db.raw('SELECT EXISTS ?', db.table('users').where(...args).select(db.raw('1')))\n      .then(x => x.rows[0].exists);\n  }\n\n  static create(user) {\n    return db.table('users')\n      .insert(user, ['id', 'email']).then(x => x[0]);\n  }\n\n  static setClaims(userId, provider, providerKey, claims) {\n    return db.transaction(trx => Promise.all([\n      trx.table('user_logins').insert({\n        user_id: userId,\n        name: provider,\n        key: providerKey,\n      }),\n      ...claims.map(claim => trx.raw('SELECT EXISTS ?', trx.table('user_claims')\n        .where({ user_id: userId, type: claim.type }))\n        .then(x => x.rows[0].exists ? // eslint-disable-line no-confusing-arrow\n          trx.table('user_claims')\n            .where({ user_id: userId, type: claim.type })\n            .update({ value: claim.value }) :\n          trx.table('user_claims')\n            .insert({ user_id: userId, type: claim.type, value: claim.value }))),\n    ]));\n  }\n}\n\nexport default User;\n"]}