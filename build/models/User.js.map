{"version":3,"sources":["../src/models/User.js"],"names":["User","findOne","args","console","log","table","where","first","findOneByLogin","provider","key","leftJoin","any","raw","select","then","x","rows","exists","create","user","insert","setClaims","userId","providerKey","claims","transaction","trx","Promise","all","user_id","name","map","claim","type","update","value"],"mappings":";;;;;;AAWA;;;;;;AAEA,MAAMA,IAAN,CAAW;;AAET,SAAOC,OAAP,CAAe,GAAGC,IAAlB,EAAwB;AACtBC,YAAQC,GAAR,CAAYF,IAAZ,EAAkB,mBAAlB;AACA,WAAO,aAAGG,KAAH,CAAS,OAAT,EAAkBC,KAAlB,CAAwB,GAAGJ,IAA3B,EAAiCK,KAAjC,CAAuC,IAAvC,EAA6C,OAA7C,CAAP;AACD;;AAED,SAAOC,cAAP,CAAsBC,QAAtB,EAAwCC,GAAxC,EAAqD;AACnD,WAAO,aAAGL,KAAH,CAAS,OAAT,EACJM,QADI,CACK,aADL,EACoB,UADpB,EACgC,qBADhC,EAEJL,KAFI,CAEE,EAAE,oBAAoBG,QAAtB,EAAgC,mBAAmBC,GAAnD,EAFF,EAGJH,KAHI,CAGE,IAHF,EAGQ,OAHR,CAAP;AAID;;AAED,SAAOK,GAAP,CAAW,GAAGV,IAAd,EAAoB;AAClB,WAAO,aAAGW,GAAH,CAAO,iBAAP,EAA0B,aAAGR,KAAH,CAAS,OAAT,EAAkBC,KAAlB,CAAwB,GAAGJ,IAA3B,EAAiCY,MAAjC,CAAwC,aAAGD,GAAH,CAAO,GAAP,CAAxC,CAA1B,EACJE,IADI,CACCC,KAAKA,EAAEC,IAAF,CAAO,CAAP,EAAUC,MADhB,CAAP;AAED;;AAED,SAAOC,MAAP,CAAcC,IAAd,EAAoB;AAClB,WAAO,aAAGf,KAAH,CAAS,OAAT,EACJgB,MADI,CACGD,IADH,EACS,CAAC,IAAD,EAAO,OAAP,CADT,EAC0BL,IAD1B,CAC+BC,KAAKA,EAAE,CAAF,CADpC,CAAP;AAED;;AAED,SAAOM,SAAP,CAAiBC,MAAjB,EAAyBd,QAAzB,EAAmCe,WAAnC,EAAgDC,MAAhD,EAAwD;AACtD,WAAO,aAAGC,WAAH,CAAeC,OAAOC,QAAQC,GAAR,CAAY,CACvCF,IAAItB,KAAJ,CAAU,aAAV,EAAyBgB,MAAzB,CAAgC;AAC9BS,eAASP,MADqB;AAE9BQ,YAAMtB,QAFwB;AAG9BC,WAAKc;AAHyB,KAAhC,CADuC,EAMvC,GAAGC,OAAOO,GAAP,CAAWC,SAASN,IAAId,GAAJ,CAAQ,iBAAR,EAA2Bc,IAAItB,KAAJ,CAAU,aAAV,EAC/CC,KAD+C,CACzC,EAAEwB,SAASP,MAAX,EAAmBW,MAAMD,MAAMC,IAA/B,EADyC,CAA3B,EAEpBnB,IAFoB,CAEfC,KAAKA,EAAEC,IAAF,CAAO,CAAP,EAAUC,MAAV,GAAmB;AAC5BS,QAAItB,KAAJ,CAAU,aAAV,EACGC,KADH,CACS,EAAEwB,SAASP,MAAX,EAAmBW,MAAMD,MAAMC,IAA/B,EADT,EAEGC,MAFH,CAEU,EAAEC,OAAOH,MAAMG,KAAf,EAFV,CADS,GAITT,IAAItB,KAAJ,CAAU,aAAV,EACGgB,MADH,CACU,EAAES,SAASP,MAAX,EAAmBW,MAAMD,MAAMC,IAA/B,EAAqCE,OAAOH,MAAMG,KAAlD,EADV,CANmB,CAApB,CANoC,CAAZ,CAAtB,CAAP;AAeD;AAxCQ,C,CAbX;;;;;;;;;kBAwDepC,I","file":"User.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport db from '../db';\n\nclass User {\n\n  static findOne(...args) {\n    console.log(args, 'here are the args')\n    return db.table('users').where(...args).first('id', 'email');\n  }\n\n  static findOneByLogin(provider: string, key: string) {\n    return db.table('users')\n      .leftJoin('user_logins', 'users.id', 'user_logins.user_id')\n      .where({ 'user_logins.name': provider, 'user_logins.key': key })\n      .first('id', 'email');\n  }\n\n  static any(...args) {\n    return db.raw('SELECT EXISTS ?', db.table('users').where(...args).select(db.raw('1')))\n      .then(x => x.rows[0].exists);\n  }\n\n  static create(user) {\n    return db.table('users')\n      .insert(user, ['id', 'email']).then(x => x[0]);\n  }\n\n  static setClaims(userId, provider, providerKey, claims) {\n    return db.transaction(trx => Promise.all([\n      trx.table('user_logins').insert({\n        user_id: userId,\n        name: provider,\n        key: providerKey,\n      }),\n      ...claims.map(claim => trx.raw('SELECT EXISTS ?', trx.table('user_claims')\n        .where({ user_id: userId, type: claim.type }))\n        .then(x => x.rows[0].exists ? // eslint-disable-line no-confusing-arrow\n          trx.table('user_claims')\n            .where({ user_id: userId, type: claim.type })\n            .update({ value: claim.value }) :\n          trx.table('user_claims')\n            .insert({ user_id: userId, type: claim.type, value: claim.value }))),\n    ]));\n  }\n}\n\nexport default User;\n"]}