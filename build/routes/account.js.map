{"version":3,"sources":["../src/routes/account.js"],"names":["router","loginProviders","provider","options","scope","getOrigin","url","startsWith","x","String","protocol","host","parse","isValidReturnURL","whitelist","process","env","CORS_ORIGIN","split","isURL","require_protocol","protocols","includes","getSuccessRedirect","req","query","return","body","cookies","sid","session","cookie","originalMaxAge","forEach","console","log","get","res","next","returnTo","authenticate","failureFlash","successReturnToOrRedirect","failureRedirect","post","logout","status","send","errors","flash"],"mappings":"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","file":"account.js","sourcesContent":["/**\n * Node.js API Starter Kit (https://reactstarter.com/nodejs)\n *\n * Copyright Â© 2016-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport URL from 'url';\nimport passport from 'passport';\nimport validator from 'validator';\nimport { Router } from 'express';\n\nconst router = new Router();\n\n// External login providers. Also see src/passport.js.\nconst loginProviders = [\n  {\n    provider: 'facebook',\n    options: { scope: ['email', 'user_location'] },\n  },\n  {\n    provider: 'google',\n    options: { scope: 'profile email' },\n  },\n  {\n    provider: 'twitter',\n    options: {},\n  },\n  {\n    provider: 'instagram',\n    options: { scope: ['basic', 'public_content', 'follower_list', 'comments', 'relationships', 'likes'] },\n  },\n];\n\n// '/about' => ''\n// http://localhost:3000/some/page => http://localhost:3000\nfunction getOrigin(url: string) {\n  if (!url || url.startsWith('/')) return '';\n  return (x => `${String(x.protocol)}//${String(x.host)}`)(URL.parse(url));\n}\n\n// '/about' => `true` (all relative URL paths are allowed)\n// 'http://localhost:3000/about' => `true` (but only if its origin is whitelisted)\nfunction isValidReturnURL(url: string) {\n  if (url.startsWith('/')) return true;\n  const whitelist = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : [];\n  return validator.isURL(url, { require_protocol: true, protocols: ['http', 'https'] })\n    && whitelist.includes(getOrigin(url));\n}\n\n// Generates a URL for redirecting a user to upon successfull authentication.\n// It is intended to support cross-domain authentication in development mode.\n// For example, a user goes to http://localhost:3000/login (frontend) to sign in,\n// then he's being redirected to http://localhost:8080/login/facebook (backend),\n// Passport.js redirects the user to Facebook, which redirects the user back to\n// http://localhost:8080/login/facebook/return and finally, user is being redirected\n// to http://localhost:3000/?sessionID=xxx where front-end middleware can save that\n// session ID into cookie (res.cookie.sid = req.query.sessionID).\nfunction getSuccessRedirect(req) {\n  const url = req.query.return || req.body.return || '/';\n  if (!isValidReturnURL(url)) return '/';\n  if (!getOrigin(url)) return url;\n  return `${url}${url.includes('?') ? '&' : '?'}sessionID=${req.cookies.sid}${\n    req.session.cookie.originalMaxAge ? `&maxAge=${req.session.cookie.originalMaxAge}` : ''}`;\n}\n\n// Registers route handlers for the external login providers\nloginProviders.forEach(({ provider, options }) => {\n  console.log(provider, 'here is the provider and i am in here')\n  router.get(`/login/${provider}`,\n    (req, res, next) => { req.session.returnTo = getSuccessRedirect(req); next(); },\n    passport.authenticate(provider, { failureFlash: true, ...options }));\n\n  router.get(`/login/${provider}/return`, (req, res, next) => {\n    console.log(provider, 'I am trying to authenticate my self', `${getOrigin(req.session.returnTo)}/login`)\n    passport.authenticate(provider, {\n      successReturnToOrRedirect: true,\n      failureFlash: true,\n      failureRedirect: `${getOrigin(req.session.returnTo)}/login`,\n    })(req, res, next);\n  });\n});\n\n// Remove the `user` object from the session. Example:\n//   fetch('/login/clear', { method: 'POST', credentials: 'include' })\n//     .then(() => window.location = '/')\nrouter.post('/login/clear', (req, res) => { req.logout(); res.status(200).send('OK'); });\n\n// Allows to fetch the last login error(s) (which is usefull for single-page apps)\nrouter.post('/login/error', (req, res) => { res.send({ errors: req.flash('error') }); });\n\nexport default router;\n"]}